/* global module, test, expect */
/* eslint-disable no-magic-numbers*/
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

function fiboEvenSum(number) {
  let prev = 0,
      curr = 1,
      result = 0;

  while (curr <= number) {
    let temp = curr;

    // Setup new numbers
    curr += prev; //1
    prev = temp; //1

    if (curr % 2 === 0) {
      result += curr;
    }
  }

  return result;
}

test("fiboEvenSum(10) should return 10", () => {
  expect(fiboEvenSum(10)).toBe(10);
});

test("fiboEvenSum(34) should return 44", () => {
  expect(fiboEvenSum(34)).toBe(44);
});

test("fiboEvenSum(60) should return 44", () => {
  expect(fiboEvenSum(60)).toBe(44);
});

test("fiboEvenSum(1000) should return 798", () => {
  expect(fiboEvenSum(1000)).toBe(798);
});

test("fiboEvenSum(100000) should return 60696", () => {
  expect(fiboEvenSum(100000)).toBe(60696);
});

test("fiboEvenSum(4000000) should return 4613732", () => {
  expect(fiboEvenSum(4000000)).toBe(4613732);
});
