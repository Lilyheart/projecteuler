/* global module, test, expect */
/* eslint no-plusplus: ["error", { "allowForLoopAfterthoughts": true }] */
/* eslint-disable no-magic-numbers, id-length, no-ternary*/

// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// What is the value of the first triangle number to have over five hundred divisors?

function divisibleTriangleNumber(divisors) {
  let triNum, factors, limit,
      triBase = 0;

  while (true) { // eslint-disable-line no-constant-condition
    triBase += 1;
    triNum = (triBase * (triBase + 1)) / 2;
    factors = [];

    limit = Math.ceil(Math.sqrt(triNum));

    for (let i = 1; i < limit; i++) {
      if (triNum % i === 0) {
        factors.push(i);
        factors.push(triNum / i);
      }
    }

    if (factors.length >= divisors) {
      return triNum;
    }
  }
}

test("1 divisibleTriangleNumber(5) should return 28.", () => {
  expect(divisibleTriangleNumber(5)).toBe(28);
});

test("2 divisibleTriangleNumber(23) should return 630.", () => {
  expect(divisibleTriangleNumber(23)).toBe(630);
});

test("3 divisibleTriangleNumber(167) should return 1385280.", () => {
  expect(divisibleTriangleNumber(167)).toBe(1385280);
});

test("4 divisibleTriangleNumber(374) should return 17907120.", () => {
  expect(divisibleTriangleNumber(374)).toBe(17907120);
});

test("5 divisibleTriangleNumber(500) should return 76576500.", () => {
  expect(divisibleTriangleNumber(500)).toBe(76576500);
});
