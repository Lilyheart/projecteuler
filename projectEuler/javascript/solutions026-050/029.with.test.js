/* global module, test, expect */
/* eslint no-plusplus: ["error", { "allowForLoopAfterthoughts": true }] */
/* eslint-disable no-magic-numbers, id-length, no-ternary*/

// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

function distinctPowers(n) {
  let sequence = [];

  for (let i = 2; i <= n; i++) {
    for (let j = 2; j <= n; j++) {
      if (sequence.indexOf(Math.pow(i, j)) === -1) {
        sequence.push(Math.pow(i, j));
      }
    }
  }

  return sequence.length;
}


test("0 distinctPowers(5) should return 15.", () => {
  expect(distinctPowers(5)).toBe(15);
});

test("1 distinctPowers(15) should return 177.", () => {
  expect(distinctPowers(15)).toBe(177);
});

test("2 distinctPowers(20) should return 324.", () => {
  expect(distinctPowers(20)).toBe(324);
});

test("3 distinctPowers(25) should return 519.", () => {
  expect(distinctPowers(25)).toBe(519);
});

test("4 distinctPowers(30) should return 755.", () => {
  expect(distinctPowers(30)).toBe(755);
});

test("5 distinctPowers(100) should return 755.", () => {
  expect(distinctPowers(100)).toBe(9183);
});
